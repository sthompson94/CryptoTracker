{"version":3,"sources":["Components/CryptoCard.js","Components/Ticker.js","Components/Timer.js","Components/Banner.js","Components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoCard","props","className","classes","nameColor","name","price","sevenDayChange","oneDayChange","Ticker","Component","getData","require","rp","method","uri","then","response","console","log","JSON","parse","results","setState","firstName","firstprice","quote","USD","toFixed","first7dayChange","percent_change_7d","first1dayChange","percent_change_24h","secondName","secondprice","second7dayChange","second1dayChange","thirdName","thirdprice","third7dayChange","third1dayChange","fourthName","fourthprice","fourth7dayChange","fourth1dayChange","catch","err","message","updateInfo","dataFunction","setInterval","state","this","React","Banner","Button","href","link","role","text","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdbbc9fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction CryptoCard(props) {\r\n  return (\r\n    <div className={props.classes}>\r\n        <div className=\"container border border-dark rounded\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-1\"></div>\r\n        <div className=\"col-sm-10\">\r\n          <h1 className={props.nameColor}>{props.name}</h1>\r\n          <h2>Current Price: ${props.price}</h2>\r\n        </div>\r\n        <div className=\"col-sm-1\"></div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-1\"></div>\r\n        <h5 className=\"col-sm-5\">7 day change: {props.sevenDayChange}%</h5>\r\n        <h5 className=\"col-sm-5\">24 hour change: {props.oneDayChange}%</h5>\r\n        <div className=\"col-sm-1\"></div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CryptoCard;\r\n","import React from \"react\";\nimport CryptoCard from './CryptoCard';\nimport Timer from './Timer'\n\n\n\nclass Ticker extends React.Component {\n  constructor(props){\n    super(props)\n  \n  this.state = {\n    firstName: \"\",\n    firstprice: \"\",\n    first7dayChange: \"\",\n    first1dayChange: \"\",\n    secondName: \"\",\n    secondprice: \"\",\n    second7dayChange: \"\",\n    second1dayChange: \"\",\n    thirdName: \"\",\n    thirdprice: \"\",\n    third7dayChange: \"\",\n    third1dayChange: \"\",\n    fourthName: \"\",\n    fourthprice: \"\",\n    fourth7dayChange: \"\",\n    fourth1dayChange: \"\",\n    };\n  }\n    //after component mounts get the data, and update it periodically\n  componentDidMount() {\n    this.getData();\n    this.updateInfo();\n  }\n\n  //What is actully seen on the screen\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          {/* <Timer/> */}\n          \n          \n        <CryptoCard\n        name = {this.state.firstName}\n        price = {this.state.firstprice}\n        sevenDayChange = {this.state.first7dayChange}\n        oneDayChange = {this.state.first1dayChange}\n        nameColor = \"text-success\"\n        classes = \"col-sm-12 cryptocard mx-auto\"\n        />\n        </div>\n        <div className=\"row\">\n        <CryptoCard\n        name = {this.state.secondName}\n        price = {this.state.secondprice}\n        sevenDayChange = {this.state.second7dayChange}\n        oneDayChange = {this.state.second1dayChange}\n        classes = \"col-sm-4 cryptocard\"\n        />\n        <CryptoCard\n        name = {this.state.thirdName}\n        price = {this.state.thirdprice}\n        sevenDayChange = {this.state.third7dayChange}\n        oneDayChange = {this.state.third1dayChange}\n        classes = \"col-sm-4 centerCard cryptocard\"\n        />\n        <CryptoCard\n        name = {this.state.fourthName}\n        price = {this.state.fourthprice}\n        sevenDayChange = {this.state.fourth7dayChange}\n        oneDayChange = {this.state.fourth1dayChange}\n        classes = \"col-sm-4 cryptocard\"\n        />\n        </div>\n      </div>\n    );\n  }\n \n\n  //Request to backend server\n  getData = () => {\n    const rp = require(\"request-promise\");\n    const requestOptions = {\n      method: \"GET\",\n      uri:\n        \"https://sthompson94.github.io/CryptoTracker/api/cryptos\",\n    };\n\n    rp(requestOptions)\n      .then((response) => {\n        console.log(\"API call response:\", JSON.parse(response));\n        var results = JSON.parse(response);\n        \n          //grab the data from the API call response and assign propper variables to propper data\n        this.setState({\n          firstName: results[0].name,\n          firstprice: results[0].quote.USD.price.toFixed(2),\n          first7dayChange: results[0].quote.USD.percent_change_7d.toFixed(2),\n          first1dayChange: results[0].quote.USD.percent_change_24h.toFixed(2),\n          secondName: results[1].name,\n          secondprice: results[1].quote.USD.price.toFixed(2),\n          second7dayChange: results[1].quote.USD.percent_change_7d.toFixed(2),\n          second1dayChange: results[1].quote.USD.percent_change_24h.toFixed(2),\n          thirdName: results[2].name,\n          thirdprice: results[2].quote.USD.price.toFixed(3),\n          third7dayChange: results[2].quote.USD.percent_change_7d.toFixed(2),\n          third1dayChange: results[2].quote.USD.percent_change_24h.toFixed(2),\n          fourthName: results[3].name,\n          fourthprice: results[3].quote.USD.price.toFixed(2),\n          fourth7dayChange: results[3].quote.USD.percent_change_7d.toFixed(2),\n          fourth1dayChange: results[3].quote.USD.percent_change_24h.toFixed(2),\n        });\n      })\n      //if theres an error, display the error in the console\n      .catch((err) => {\n        console.log(\"API call error:\", err.message);\n      });\n  };\n\n  \n//function for updating the displayed data\n  updateInfo = () => {\n    var dataFunction = this.getData;\n    \n    setInterval(function(){dataFunction()}, 30000)\n  }\n}\n\n\n\nexport default Ticker;\n","import React, { Component } from 'react'\r\n\r\nclass Timer extends Component{\r\nconstructor(props){\r\nsuper(props)\r\n\r\nthis.state = {\r\n    countdown: 30,\r\n}\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.loopIncrimentTimer();\r\n}\r\n\r\nresetTimer(){\r\n    this.setState({countdown:30})\r\n}\r\n\r\n\r\n\r\nincrimentTimer(){\r\n    this.setState({countdown: this.state.countdown -1})\r\n}\r\n\r\nloopIncrimentTimer(){\r\n    var incrimentFunction = this.incrimentTimer;\r\n\r\n    setInterval(function(){incrimentFunction()}, 1000)\r\n}\r\n\r\n\r\n\r\nrender(){\r\n    return(\r\n        <div>\r\n            <h3>Refreshing Data in : {this.state.countdown} seconds</h3>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Timer","import React from 'react'\r\n\r\n\r\nfunction Banner (){\r\n    return(\r\n        <div className=\"bg-info banner\">\r\n            <h1 className=\"navbar-text\">Live Cryptocurrenty Prices!</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React from 'react'\n\nfunction Button(props){\n    return(\n        <div>\n            <a className=\"btn btn-default\" href={props.link} role=\"button\">{props.text}</a>\n        </div>\n    )\n}\n\n\nexport default Button;","import \"./App.css\";\nimport Ticker from \"./Components/Ticker\";\nimport Banner from \"./Components/Banner\";\nimport Button from \"./Components/Button\";\n\n// Testing for github again\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <div className=\"container\">\n        <Ticker />\n\n            <Button\n              classes=\"btn btn-default\"\n              link=\"https://bitcoin.org/en/how-it-works\"\n              text=\"Learn about Bitcoin\"\n            />\n          \n            <Button\n              classes=\"btn btn-default\"\n              link=\"https://ethereum.org/en/learn/\"\n              text=\"Learn about Ethereum\"\n            />\n            </div>\n          </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}